
File hierarchy (6/13/2023):  8 files, 4 levels

   scale   meter           lily 
   / |    /| |  \         |    \
  '  |   / V `-. \        V     \         gens
  |  |  / gens |  `-> lily-utils \         | |
  |  | ' / |   |        |        |         | score-utils lily-utils
  |  | | | |   `-----.  |  .-----'         | |
  |  V V V |         |  |  |          utils score 
  |  utils |         |  |  |
  |        |         V  V  V
  |        ` ------>.-------.
  `---------------->| score |
                    `-------'
		        |
                        V
                   score-syms

Re: random subsystem in Racket.  Want to use (random-seed (current-milliseconds)) to get started.
For recreating same number stream in a new score, save (current-milliseconds) via number->string
to seed field in score.  There are better ways in Racket to initialize the pseudo-random number
generator but I'm not sure they're worth the effort of recording a vector in the seed.

Remember also progression by increasing intensity, e.g. for period use series like fibonacci, 
e.g. 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, so the rate of change accelerates.  

Single lily-gen package with integrated product types in score.rkt, lilypond
behavior in lily.gen, and utilities.  At best, put all this one level deeper
into a lib folder so the top level can be for languages.  


generators.rkt> (pseudo-random-generator->vector (current-pseudo-random-generator))
'#(1846850895 3353127980 1207956883 3687271794 827146902 2053591720)
generators.rkt> (random)
0.701459829905919
generators.rkt> (random)
0.13014560823102633
generators.rkt> (current-pseudo-random-generator (vector->pseudo-random-generator '#(1846850895 3353127980 1207956883 3687271794 827146902 2053591720)))
generators.rkt> (random)
0.701459829905919
generators.rkt> (random)
0.13014560823102633


   
